import { load } from 'cheerio';
import { randomInt } from '../../helpers/randomInt';
import { CommandBuilder } from '../../helpers/commandBuilder';

export const dispute = new CommandBuilder('Reaction.Dispute')
    .on(/mtggoldfish\.com\/deck\/(\d+)/i)
    .do(async (ctx) => {
        const deckId = ctx.matchResults[0][1];
        const response = await fetch(
            `https://www.mtggoldfish.com/deck/arena_download/${deckId}`
        );
        const text = await response.text();
        const findInDOM = load(text);
        const cards = findInDOM('.copy-paste-box').text();

        const hasOffering = cards.indexOf('Fanatical Offering') != -1;
        const hasEnforcer = cards.indexOf('Myr Enforcer') != -1;

        const isRakdos =
            cards.indexOf('Mountain') != -1 &&
            cards.indexOf('Swamp') != -1 &&
            cards.indexOf('Island') == -1 &&
            cards.indexOf('Plains') == -1 &&
            cards.indexOf('Forest') == -1;

        if (isRakdos) {
            ctx.reply.withText('–º–∏ –¥–æ—Å—ñ –ø—Ä–æ —Ä–∞–∫–¥–æ—Å –¥—Ä–æ—á–Ω—é?');
        } else if (hasOffering) {
            ctx.reply.withImage(`offering`);
        } else if (hasEnforcer) {
            ctx.reply.withText(
                '–í–ê–ê–ê–ê–£! –≤–ø–µ—Ä—à–µ –±–∞—á—É —Ç–∞–∫–∏–π –Ω–∞–±—ñ—Ä –∫–∞—Ä—Ç. –∞–≤—Ç–æ—Ä –≥–µ–Ω—ñ–π!'
            );
        } else if (randomInt(0, 1) == 0) {
            ctx.reply.withReaction('üçå');
        }
    })
    .build();
